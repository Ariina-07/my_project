Ответы на вопросы по Express.js

1. В чем преимущества использования Express.js по сравнению с чистым Node.js?

- Простота - меньше кода для тех же задач
- Маршрутизация - встроенная система роутинга
- Middleware - готовые промежуточные обработчики
- Сообщество - много готовых решений и библиотек

2. Что такое middleware в Express.js?

Middleware - это функции, которые выполняются между получением запроса и отправкой ответа. Они могут:
- Логировать запросы
- Парсить данные
- Проверять аутентификацию
- Обрабатывать ошибки

3. Как организовать модульную структуру роутеров?

Создаем отдельные файлы для каждой сущности (users.js, products.js) и подключаем их в главном файле через `app.use()`.

4. Какие методы роутинга поддерживает Express.js?

- GET - получение данных
- POST - создание данных
- PUT - обновление данных
- DELETE - удаление данных
- PATCH - частичное обновление

5. Как обрабатывать параметры URL и query-параметры?

- Параметры URL: `req.params.id` (для /users/:id)
- Query-параметры: `req.query.category` (для /products?category=electronics)
6. В чем разница между app.use() и app.METHOD()?

- `app.use()` - для middleware и обработки всех HTTP-методов
- `app.METHOD()` - для обработки конкретного HTTP-метода (GET, POST и т.д.)

7. Как организовать централизованную обработку ошибок?

Используем middleware с 4 параметрами:
```javascript
app.use((err, req, res, next) => {
    console.error(err);
    res.status(500).json({ error: 'Ошибка сервера' });
});