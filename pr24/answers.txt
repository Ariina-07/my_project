Ответы на вопросы для самоконтроля

1. Какие методы HTTP используются для CRUD операций?
    - `GET` - для чтения (получения данных).
    - `POST` - для создания новых данных.
    - `PUT` / `PATCH` - для полного или частичного обновления данных.
    - `DELETE` - для удаления данных.

2. Как организовать обработку ошибок на фронтенде?
    Использовать блок `try/catch` при отправке запросов. В состоянии `error` хранить сообщение об ошибке и выводить его пользователю.

3. Что такое CORS и как его настроить?
    CORS - это механизм, который запрещает браузеру делать запросы с одного домена (localhost:3000) на другой (localhost:5000). Настраивается на бэкенде с помощью middleware `cors()`.

4. Какие подходы к управлению состоянием при интеграции с API?
    Локальное состояние React (`useState`), глобальное состояние (Redux, Context API), серверное состояние (React Query, SWR). В этой работе использовалось локальное состояние.

5. Как реализовать индикацию загрузки без ухудшения UX?
    Использовать состояние `loading`. Показывать спиннер или текст "Загрузка..." только на время выполнения запроса, а не блокировать весь интерфейс.

6. Преимущества и недостатки оптимистичных обновлений?
    +Очень быстрое отклик для пользователя.
    - Если запрос на сервер провалится, данные на клиенте и сервере рассинхронизируются. Нужно реализовывать откат изменений.

7. Как организовать валидацию данных?
    На клиенте: проверять поля формы перед отправкой (например, `if (!title.trim()) {...}`).
    На сервере: проверять входящие данные в обработчиках маршрутов (endpoints) и возвращать ошибку 400, если данные неверные.

8. Какие методы кэширования данных с сервера можно использовать?
    - Сохранять данные в состоянии React.
    - Использовать `localStorage` или `sessionStorage`.
    - Использовать специализированные библиотеки для кэширования, такие как React Query.