Ответы на вопросы
1. preventDefault() vs stopPropagation()
- preventDefault() - отменяет стандартное поведение (например, переход по ссылке)
- stopPropagation() - останавливает всплытие события к родителям
- preventDefault используется для форм и ссылок, stopPropagation когда не нужно чтобы родители узнали о событии

2. Делегирование событий
- Обработчик вешается на родителя, а не на каждый элемент
- Преимущества: работает с динамическими элементами, меньше обработчиков, экономит память

3. Фазы событий
- Capturing - событие идет сверху вниз к целевому элементу
- Target - событие достигло целевого элемента  
- Bubbling - событие всплывает от целевого элемента наверх
- По умолчанию обработчики работают на фазе bubbling

4. target vs currentTarget
- target - элемент, который вызвал событие
- currentTarget - элемент, на котором висит обработчик
- target используем когда нужно знать исходный элемент, currentTarget - когда работаем с элементом-обработчиком

5. Кастомные события
- Создаем: new CustomEvent('имя', {detail: данные})
- Запускаем: element.dispatchEvent(событие)
- В detail можно передать любые данные

6. Debounce и Throttle
- Debounce - откладывает выполнение пока вызовы не прекратятся
- Throttle - ограничивает частоту вызовов
- Используются для поиска, скролла, resize событий

7. Удаление обработчиков
- removeEventListener('событие', функция)
- Важно удалять чтобы избежать утечек памяти

8. Ошибки загрузки
- Используем события load, error, abort
- Для изображений: img.onerror = функция
- Можно показывать заглушки при ошибках

9. addEventListener vs onclick
- addEventListener - можно несколько обработчиков на одно событие
- onclick - только один обработчик, перезаписывается
- addEventListener гибче и современнее

10. Оптимизация событий
- Использовать делегирование
- Удалять ненужные обработчики  
- Использовать debounce/throttle для частых событий
- Избегать сложных вычислений в обработчиках