1. Promise.then().catch() - цепочки, async/await - линейный код. Async/await проще читать, then/catch лучше для параллельных операций.

2. Promise.all ждет все промисы. Если один с ошибкой - весь массив с ошибкой. Возвращает массив результатов.

3. Promise.all - все успешно или ошибка, Promise.race - первый завершенный, Promise.allSettled - все со статусами.

4. Retry с экспоненциальной задержкой: цикл с attempt, catch ошибки, увеличивать задержку Math.pow(2, attempt) * 100.

5. Race condition - когда результат зависит от порядка выполнения асинхронных операций. Избегать: использовать Promise.all, корректные условия.

6. Кэширование: сохранять результаты запросов в Map или localStorage. Стратегии: TTL (время жизни), инвалидация по ключу.

7. Оптимизация: Promise.all для параллелизма, кэширование, отмена ненужных запросов, пагинация данных.

8. Обработка ошибок: всегда возвращать промисы в цепочках, использовать catch в конце, не пропускать ошибки молча.

9. Async/await преимущества: код выглядит синхронным, проще отладка, легче обработка ошибок через try/catch.

10. Отладка: console.log с временными метками, точки останова в DevTools, async stack traces, мониторинг промисов.