Ответы на вопросы для самоконтроля

1. В чем разница между innerHTML и textContent и когда следует использовать каждый метод?

innerHTML - возвращает или устанавливает HTML-содержимое элемента, включая теги. Может быть уязвим для XSS-атак если используется с непроверенными данными.

textContent - возвращает или устанавливает только текстовое содержимое элемента, игнорируя HTML-теги. Более безопасен и быстрее.

Когда использовать:
- `innerHTML` - когда нужно вставить HTML-разметку
- `textContent` - когда нужно работать только с текстом

2. Как работает делегирование событий (event delegation) и какие преимущества оно дает при работе с динамическими элементами?

Делегирование событий - это прием, когда обработчик события назначается родительскому элементу, а не каждому дочернему элементу отдельно. События всплывают от целевого элемента к родителям.

Преимущества:
- Экономит память (меньше обработчиков)
- Работает с динамически добавленными элементами
- Упрощает код

3. Какие методы используются для поиска элементов в DOM и в чем разница между getElementById, querySelector и querySelectorAll?

getElementById() - находит элемент по id, возвращает один элемент.

querySelector() - находит первый элемент по CSS-селектору.

querySelectorAll() - находит все элементы по CSS-селектору, возвращает NodeList.

Разница: getElementById быстрее, но querySelector более гибкий.

4. Как предотвратить стандартное поведение элемента при обработке событий и когда это необходимо?

Метод: `event.preventDefault()`

Когда необходимо:
- При отправке форм (чтобы страница не перезагружалась)
- При клике на ссылки (чтобы не переходить по URL)
- При перетаскивании файлов (чтобы браузер не открывал файл)

5. В чем разница между classList.add() и className для работы с CSS классами?

className - полностью заменяет все классы элемента строкой.

classList.add() - добавляет конкретный класс, не затрагивая другие.

classList предоставляет методы: add(), remove(), toggle(), contains() - более удобен для работы с несколькими классами.

6. Как создать новый элемент и добавить его в DOM несколькими способами? Какой способ наиболее эффективен?

Способы:
1. `document.createElement() + appendChild()`
2. `innerHTML`
3. `insertAdjacentHTML()`

Наиболее эффективен: `document.createElement()` + `appendChild()` - безопаснее и быстрее для частых операций.

7. Что такое всплытие событий (event bubbling) и как работает метод stopPropagation()?

Всплытие событий - процесс, когда событие сначала обрабатывается на целевом элементе, затем на его родителях вверх по DOM-дереву.

stopPropagation() - останавливает всплытие события, но не предотвращает стандартное поведение.

8. Как получить данные из формы и в чем разница между методами сбора form data?

Методы:
1. Через элементы формы: `form.elements.name.value`
2. FormData API: `new FormData(form)`
3. Сбор вручную через querySelector

FormData удобнее для работы с файлами и сериализацией данных.

9. Какие события используются для обработки ввода данных и в чем разница между input, change и keyup?

input - срабатывает при каждом изменении значения (в реальном времени)

change - срабатывает когда элемент теряет фокус и значение изменилось

keyup - срабатывает при отпускании клавиши

10. Как оптимизировать производительность при частых манипуляциях с DOM?

Способы оптимизации:
1. Использовать DocumentFragment для групповых вставок
2. Минимизировать перерисовки и перерасчеты layout
3. Кэшировать ссылки на DOM-элементы
4. Использовать делегирование событий
5. Избегать innerHTML в циклах