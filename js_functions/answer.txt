1.Разница между Function Declaration и Function Expression:
   - Function Declaration: всплывает (hoisting), можно вызывать до объявления
   - Function Expression: не всплывает, создается в момент выполнения

2.Rest parameters vs arguments object:
   - Rest parameters: современный синтаксис, настоящий массив
   - Arguments object: устаревший, array-like объект

3.Замыкание и лексическая область видимости:
   - Замыкание - функция + её лексическое окружение
   - Функция запоминает переменные из внешней области видимости

4.Рекурсия vs итерация:
   - Рекурсия: проще читается, но может привести к переполнению стека
   - Итерация: эффективнее по памяти, но сложнее для некоторых алгоритмов

5.Функции высшего порядка:
   - Функции, принимающие или возвращающие другие функции
   - Встроенные методы: map, filter, reduce, forEach

6.Каррирование:
   - Преобразование функции от многих аргументов в цепочку функций от одного аргумента
   - Преимущества: переиспользование, частичное применение

7.Мемоизация:
   - Кэширование результатов вызовов функции
   - Эффективна для дорогих вычислений с повторяющимися аргументами

8.Debounce vs Throttle:
   - Debounce: откладывает вызов, выполняет после паузы
   - Throttle: ограничивает частоту вызовов
   - Debounce - для поиска, Throttle - для скролла

9.Функции-генераторы:
   - Могут приостанавливать выполнение и возобновлять
   - Возвращают итератор, yield вместо return

10.Принципы функционального программирования:
    - Чистые функции (без side effects)
    - Неизменяемость данных
    - Композиция функций
    - Преимущества: предсказуемость, тестируемость